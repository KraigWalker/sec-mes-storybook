// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DropDownComponent
    accessID="Subject"
    accounts={Array []}
    content={
      Object {
        "back": "Back",
      }
    }
    id="subjects"
    messages={Array []}
    popupState={[MockFunction]}
    selectSubject={[MockFunction]}
    selectedAccountValue={null}
    showAccountError={false}
    showSubjectError={false}
    subjectErrors={false}
    subjects={Array []}
    successModal={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Column
          className="u-padding-0"
          ld={9}
          md={9}
          sm={24}
          xs={24}
        >
          <TextBody>
            <Select
              defaultValue={undefined}
              disabled={false}
              id={undefined}
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": undefined,
                    "value": undefined,
                  },
                ]
              }
            />
          </TextBody>
        </Column>,
        "",
        "",
        "",
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <TextBody>
            <Select
              defaultValue={undefined}
              disabled={false}
              id={undefined}
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": undefined,
                    "value": undefined,
                  },
                ]
              }
            />
          </TextBody>,
          "className": "u-padding-0",
          "ld": 9,
          "md": 9,
          "sm": 24,
          "xs": 24,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Select
              defaultValue={undefined}
              disabled={false}
              id={undefined}
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": undefined,
                    "value": undefined,
                  },
                ]
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "defaultValue": undefined,
              "disabled": false,
              "id": undefined,
              "onChange": [Function],
              "options": Array [
                Object {
                  "label": undefined,
                  "value": undefined,
                },
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "",
      "",
      "",
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Column
            className="u-padding-0"
            ld={9}
            md={9}
            sm={24}
            xs={24}
          >
            <TextBody>
              <Select
                defaultValue={undefined}
                disabled={false}
                id={undefined}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": undefined,
                      "value": undefined,
                    },
                  ]
                }
              />
            </TextBody>
          </Column>,
          "",
          "",
          "",
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <TextBody>
              <Select
                defaultValue={undefined}
                disabled={false}
                id={undefined}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": undefined,
                      "value": undefined,
                    },
                  ]
                }
              />
            </TextBody>,
            "className": "u-padding-0",
            "ld": 9,
            "md": 9,
            "sm": 24,
            "xs": 24,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Select
                defaultValue={undefined}
                disabled={false}
                id={undefined}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": undefined,
                      "value": undefined,
                    },
                  ]
                }
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "defaultValue": undefined,
                "disabled": false,
                "id": undefined,
                "onChange": [Function],
                "options": Array [
                  Object {
                    "label": undefined,
                    "value": undefined,
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        "",
        "",
        "",
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
