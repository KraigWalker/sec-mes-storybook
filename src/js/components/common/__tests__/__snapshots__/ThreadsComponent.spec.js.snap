// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ThreadsComponent snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ThreadsComponent
    ThreadDetail={
      Object {
        "message": Array [],
      }
    }
    content={Object {}}
    dispatch={[MockFunction]}
    messages={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(SecureMessageSummary)
          content={Object {}}
          hasOnClick={false}
          message={
            Object {
              "message": Array [],
            }
          }
          threadFlag={true}
        />,
        <pre
          className="c-thread__body"
        />,
      ],
      "className": "c-thread",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "content": Object {},
          "hasOnClick": false,
          "message": Object {
            "message": Array [],
          },
          "threadFlag": true,
        },
        "ref": null,
        "rendered": null,
        "type": [MockFunction],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
          "className": "c-thread__body",
        },
        "ref": null,
        "rendered": Array [],
        "type": "pre",
      },
    ],
    "type": "li",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(SecureMessageSummary)
            content={Object {}}
            hasOnClick={false}
            message={
              Object {
                "message": Array [],
              }
            }
            threadFlag={true}
          />,
          <pre
            className="c-thread__body"
          />,
        ],
        "className": "c-thread",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "content": Object {},
            "hasOnClick": false,
            "message": Object {
              "message": Array [],
            },
            "threadFlag": true,
          },
          "ref": null,
          "rendered": null,
          "type": [MockFunction],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "c-thread__body",
          },
          "ref": null,
          "rendered": Array [],
          "type": "pre",
        },
      ],
      "type": "li",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
