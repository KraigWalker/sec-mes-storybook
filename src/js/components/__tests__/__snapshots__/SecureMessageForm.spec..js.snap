// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SecureMessageForm snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SecureMessageForm
    content={
      Object {
        "back": "Back",
      }
    }
    messages={Array []}
    onMount={[Function]}
    onSave={[MockFunction]}
    popupState={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    saveDraftData={[MockFunction]}
    sendData={[MockFunction]}
    sendMessageData={[MockFunction]}
    sendMessageForAccessibiltiy={[MockFunction]}
    successModal={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <LoadingLocalTakeover
          show={undefined}
          title={undefined}
        >
          <Row>
            <Card
              bordered={false}
            >
              <Title
                size="h4"
              />
              <TextBody>
                <BackButton
                  disabled={false}
                  label="Back"
                  onClick={[Function]}
                />
              </TextBody>
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="subjectTitle"
                />
              </TextBody>
              <Connect(DropDownComponent)
                accessID="Subject"
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlSubject"
                id="subjects"
                name="subjects"
                selectSubject={[Function]}
                selectedValue={undefined}
                showSubjectError={false}
                subjectErrors={undefined}
                subjects={undefined}
              />
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="relatesTitle"
                />
              </TextBody>
              <Connect(DropDownComponent)
                accessID="Message relates to"
                accounts={undefined}
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlAccount"
                id="accounts"
                name="accounts"
                selectSubject={[Function]}
                selectedValue={undefined}
                showAccountError={false}
              />
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="messageTitle"
                />
              </TextBody>
              <TextBody>
                <div
                  className="u-visually-hidden off-screen"
                  id="textAreaMaxMsg"
                />
                <TextAreaWrapper
                  charsLeftDisplayThreshold={300}
                  cols="20"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  id="message"
                  maxChars={3000}
                  onChange={[Function]}
                  rows="20"
                  value={undefined}
                />
              </TextBody>
              <TextBody>
                <ButtonGroup
                  alignment="left"
                >
                  <Button
                    disabled={false}
                    display="secondary"
                    isLoading={false}
                    name="Back"
                    onClick={[Function]}
                    size="md"
                    width="flush"
                  >
                    Back
                  </Button>
                  <Button
                    disabled={false}
                    display="primary"
                    isLoading={false}
                    name="Save Draft"
                    onClick={[Function]}
                    size="md"
                  />
                  <Button
                    disabled={false}
                    display="primary"
                    isLoading={false}
                    name="Send"
                    onClick={[Function]}
                    size="md"
                  />
                </ButtonGroup>
              </TextBody>
            </Card>
          </Row>
        </LoadingLocalTakeover>,
        false,
        "",
        false,
        undefined,
        undefined,
        undefined,
      ],
      "size": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Row>
            <Card
              bordered={false}
            >
              <Title
                size="h4"
              />
              <TextBody>
                <BackButton
                  disabled={false}
                  label="Back"
                  onClick={[Function]}
                />
              </TextBody>
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="subjectTitle"
                />
              </TextBody>
              <Connect(DropDownComponent)
                accessID="Subject"
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlSubject"
                id="subjects"
                name="subjects"
                selectSubject={[Function]}
                selectedValue={undefined}
                showSubjectError={false}
                subjectErrors={undefined}
                subjects={undefined}
              />
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="relatesTitle"
                />
              </TextBody>
              <Connect(DropDownComponent)
                accessID="Message relates to"
                accounts={undefined}
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlAccount"
                id="accounts"
                name="accounts"
                selectSubject={[Function]}
                selectedValue={undefined}
                showAccountError={false}
              />
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="messageTitle"
                />
              </TextBody>
              <TextBody>
                <div
                  className="u-visually-hidden off-screen"
                  id="textAreaMaxMsg"
                />
                <TextAreaWrapper
                  charsLeftDisplayThreshold={300}
                  cols="20"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  id="message"
                  maxChars={3000}
                  onChange={[Function]}
                  rows="20"
                  value={undefined}
                />
              </TextBody>
              <TextBody>
                <ButtonGroup
                  alignment="left"
                >
                  <Button
                    disabled={false}
                    display="secondary"
                    isLoading={false}
                    name="Back"
                    onClick={[Function]}
                    size="md"
                    width="flush"
                  >
                    Back
                  </Button>
                  <Button
                    disabled={false}
                    display="primary"
                    isLoading={false}
                    name="Save Draft"
                    onClick={[Function]}
                    size="md"
                  />
                  <Button
                    disabled={false}
                    display="primary"
                    isLoading={false}
                    name="Send"
                    onClick={[Function]}
                    size="md"
                  />
                </ButtonGroup>
              </TextBody>
            </Card>
          </Row>,
          "show": undefined,
          "title": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Card
              bordered={false}
            >
              <Title
                size="h4"
              />
              <TextBody>
                <BackButton
                  disabled={false}
                  label="Back"
                  onClick={[Function]}
                />
              </TextBody>
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="subjectTitle"
                />
              </TextBody>
              <Connect(DropDownComponent)
                accessID="Subject"
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlSubject"
                id="subjects"
                name="subjects"
                selectSubject={[Function]}
                selectedValue={undefined}
                showSubjectError={false}
                subjectErrors={undefined}
                subjects={undefined}
              />
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="relatesTitle"
                />
              </TextBody>
              <Connect(DropDownComponent)
                accessID="Message relates to"
                accounts={undefined}
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlAccount"
                id="accounts"
                name="accounts"
                selectSubject={[Function]}
                selectedValue={undefined}
                showAccountError={false}
              />
              <TextBody>
                <Label
                  htmlFor="subjects"
                  id="messageTitle"
                />
              </TextBody>
              <TextBody>
                <div
                  className="u-visually-hidden off-screen"
                  id="textAreaMaxMsg"
                />
                <TextAreaWrapper
                  charsLeftDisplayThreshold={300}
                  cols="20"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  id="message"
                  maxChars={3000}
                  onChange={[Function]}
                  rows="20"
                  value={undefined}
                />
              </TextBody>
              <TextBody>
                <ButtonGroup
                  alignment="left"
                >
                  <Button
                    disabled={false}
                    display="secondary"
                    isLoading={false}
                    name="Back"
                    onClick={[Function]}
                    size="md"
                    width="flush"
                  >
                    Back
                  </Button>
                  <Button
                    disabled={false}
                    display="primary"
                    isLoading={false}
                    name="Save Draft"
                    onClick={[Function]}
                    size="md"
                  />
                  <Button
                    disabled={false}
                    display="primary"
                    isLoading={false}
                    name="Send"
                    onClick={[Function]}
                    size="md"
                  />
                </ButtonGroup>
              </TextBody>
            </Card>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "bordered": false,
              "children": Array [
                <Title
                  size="h4"
                />,
                <TextBody>
                  <BackButton
                    disabled={false}
                    label="Back"
                    onClick={[Function]}
                  />
                </TextBody>,
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="subjectTitle"
                  />
                </TextBody>,
                <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  name="subjects"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjectErrors={undefined}
                  subjects={undefined}
                />,
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="relatesTitle"
                  />
                </TextBody>,
                <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  name="accounts"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />,
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="messageTitle"
                  />
                </TextBody>,
                <TextBody>
                  <div
                    className="u-visually-hidden off-screen"
                    id="textAreaMaxMsg"
                  />
                  <TextAreaWrapper
                    charsLeftDisplayThreshold={300}
                    cols="20"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    id="message"
                    maxChars={3000}
                    onChange={[Function]}
                    rows="20"
                    value={undefined}
                  />
                </TextBody>,
                <TextBody>
                  <ButtonGroup
                    alignment="left"
                  >
                    <Button
                      disabled={false}
                      display="secondary"
                      isLoading={false}
                      name="Back"
                      onClick={[Function]}
                      size="md"
                      width="flush"
                    >
                      Back
                    </Button>
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Save Draft"
                      onClick={[Function]}
                      size="md"
                    />
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Send"
                      onClick={[Function]}
                      size="md"
                    />
                  </ButtonGroup>
                </TextBody>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": undefined,
                  "size": "h4",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <BackButton
                    disabled={false}
                    label="Back"
                    onClick={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Back",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Label
                    htmlFor="subjects"
                    id="subjectTitle"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": undefined,
                    "htmlFor": "subjects",
                    "id": "subjectTitle",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "accessID": "Subject",
                  "content": Object {
                    "back": "Back",
                  },
                  "ddId": "ddlSubject",
                  "id": "subjects",
                  "name": "subjects",
                  "selectSubject": [Function],
                  "selectedValue": undefined,
                  "showSubjectError": false,
                  "subjectErrors": undefined,
                  "subjects": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Label
                    htmlFor="subjects"
                    id="relatesTitle"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": undefined,
                    "htmlFor": "subjects",
                    "id": "relatesTitle",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "accessID": "Message relates to",
                  "accounts": undefined,
                  "content": Object {
                    "back": "Back",
                  },
                  "ddId": "ddlAccount",
                  "id": "accounts",
                  "name": "accounts",
                  "selectSubject": [Function],
                  "selectedValue": undefined,
                  "showAccountError": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Label
                    htmlFor="subjects"
                    id="messageTitle"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": undefined,
                    "htmlFor": "subjects",
                    "id": "messageTitle",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <div
                      className="u-visually-hidden off-screen"
                      id="textAreaMaxMsg"
                    />,
                    <TextAreaWrapper
                      charsLeftDisplayThreshold={300}
                      cols="20"
                      content={
                        Object {
                          "back": "Back",
                        }
                      }
                      id="message"
                      maxChars={3000}
                      onChange={[Function]}
                      rows="20"
                      value={undefined}
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": undefined,
                      "className": "u-visually-hidden off-screen",
                      "id": "textAreaMaxMsg",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "charsLeftDisplayThreshold": 300,
                      "cols": "20",
                      "content": Object {
                        "back": "Back",
                      },
                      "id": "message",
                      "maxChars": 3000,
                      "onChange": [Function],
                      "rows": "20",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <ButtonGroup
                    alignment="left"
                  >
                    <Button
                      disabled={false}
                      display="secondary"
                      isLoading={false}
                      name="Back"
                      onClick={[Function]}
                      size="md"
                      width="flush"
                    >
                      Back
                    </Button>
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Save Draft"
                      onClick={[Function]}
                      size="md"
                    />
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Send"
                      onClick={[Function]}
                      size="md"
                    />
                  </ButtonGroup>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alignment": "left",
                    "children": Array [
                      <Button
                        disabled={false}
                        display="secondary"
                        isLoading={false}
                        name="Back"
                        onClick={[Function]}
                        size="md"
                        width="flush"
                      >
                        Back
                      </Button>,
                      <Button
                        disabled={false}
                        display="primary"
                        isLoading={false}
                        name="Save Draft"
                        onClick={[Function]}
                        size="md"
                      />,
                      <Button
                        disabled={false}
                        display="primary"
                        isLoading={false}
                        name="Send"
                        onClick={[Function]}
                        size="md"
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Back",
                        "disabled": false,
                        "display": "secondary",
                        "isLoading": false,
                        "name": "Back",
                        "onClick": [Function],
                        "size": "md",
                        "width": "flush",
                      },
                      "ref": null,
                      "rendered": "Back",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": undefined,
                        "disabled": false,
                        "display": "primary",
                        "isLoading": false,
                        "name": "Save Draft",
                        "onClick": [Function],
                        "size": "md",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": undefined,
                        "disabled": false,
                        "display": "primary",
                        "isLoading": false,
                        "name": "Send",
                        "onClick": [Function],
                        "size": "md",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      false,
      "",
      false,
      undefined,
      undefined,
      undefined,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <LoadingLocalTakeover
            show={undefined}
            title={undefined}
          >
            <Row>
              <Card
                bordered={false}
              >
                <Title
                  size="h4"
                />
                <TextBody>
                  <BackButton
                    disabled={false}
                    label="Back"
                    onClick={[Function]}
                  />
                </TextBody>
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="subjectTitle"
                  />
                </TextBody>
                <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  name="subjects"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjectErrors={undefined}
                  subjects={undefined}
                />
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="relatesTitle"
                  />
                </TextBody>
                <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  name="accounts"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="messageTitle"
                  />
                </TextBody>
                <TextBody>
                  <div
                    className="u-visually-hidden off-screen"
                    id="textAreaMaxMsg"
                  />
                  <TextAreaWrapper
                    charsLeftDisplayThreshold={300}
                    cols="20"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    id="message"
                    maxChars={3000}
                    onChange={[Function]}
                    rows="20"
                    value={undefined}
                  />
                </TextBody>
                <TextBody>
                  <ButtonGroup
                    alignment="left"
                  >
                    <Button
                      disabled={false}
                      display="secondary"
                      isLoading={false}
                      name="Back"
                      onClick={[Function]}
                      size="md"
                      width="flush"
                    >
                      Back
                    </Button>
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Save Draft"
                      onClick={[Function]}
                      size="md"
                    />
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Send"
                      onClick={[Function]}
                      size="md"
                    />
                  </ButtonGroup>
                </TextBody>
              </Card>
            </Row>
          </LoadingLocalTakeover>,
          false,
          "",
          false,
          undefined,
          undefined,
          undefined,
        ],
        "size": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Row>
              <Card
                bordered={false}
              >
                <Title
                  size="h4"
                />
                <TextBody>
                  <BackButton
                    disabled={false}
                    label="Back"
                    onClick={[Function]}
                  />
                </TextBody>
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="subjectTitle"
                  />
                </TextBody>
                <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  name="subjects"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjectErrors={undefined}
                  subjects={undefined}
                />
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="relatesTitle"
                  />
                </TextBody>
                <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  name="accounts"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="messageTitle"
                  />
                </TextBody>
                <TextBody>
                  <div
                    className="u-visually-hidden off-screen"
                    id="textAreaMaxMsg"
                  />
                  <TextAreaWrapper
                    charsLeftDisplayThreshold={300}
                    cols="20"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    id="message"
                    maxChars={3000}
                    onChange={[Function]}
                    rows="20"
                    value={undefined}
                  />
                </TextBody>
                <TextBody>
                  <ButtonGroup
                    alignment="left"
                  >
                    <Button
                      disabled={false}
                      display="secondary"
                      isLoading={false}
                      name="Back"
                      onClick={[Function]}
                      size="md"
                      width="flush"
                    >
                      Back
                    </Button>
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Save Draft"
                      onClick={[Function]}
                      size="md"
                    />
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Send"
                      onClick={[Function]}
                      size="md"
                    />
                  </ButtonGroup>
                </TextBody>
              </Card>
            </Row>,
            "show": undefined,
            "title": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Card
                bordered={false}
              >
                <Title
                  size="h4"
                />
                <TextBody>
                  <BackButton
                    disabled={false}
                    label="Back"
                    onClick={[Function]}
                  />
                </TextBody>
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="subjectTitle"
                  />
                </TextBody>
                <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  name="subjects"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjectErrors={undefined}
                  subjects={undefined}
                />
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="relatesTitle"
                  />
                </TextBody>
                <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  name="accounts"
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />
                <TextBody>
                  <Label
                    htmlFor="subjects"
                    id="messageTitle"
                  />
                </TextBody>
                <TextBody>
                  <div
                    className="u-visually-hidden off-screen"
                    id="textAreaMaxMsg"
                  />
                  <TextAreaWrapper
                    charsLeftDisplayThreshold={300}
                    cols="20"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    id="message"
                    maxChars={3000}
                    onChange={[Function]}
                    rows="20"
                    value={undefined}
                  />
                </TextBody>
                <TextBody>
                  <ButtonGroup
                    alignment="left"
                  >
                    <Button
                      disabled={false}
                      display="secondary"
                      isLoading={false}
                      name="Back"
                      onClick={[Function]}
                      size="md"
                      width="flush"
                    >
                      Back
                    </Button>
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Save Draft"
                      onClick={[Function]}
                      size="md"
                    />
                    <Button
                      disabled={false}
                      display="primary"
                      isLoading={false}
                      name="Send"
                      onClick={[Function]}
                      size="md"
                    />
                  </ButtonGroup>
                </TextBody>
              </Card>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "bordered": false,
                "children": Array [
                  <Title
                    size="h4"
                  />,
                  <TextBody>
                    <BackButton
                      disabled={false}
                      label="Back"
                      onClick={[Function]}
                    />
                  </TextBody>,
                  <TextBody>
                    <Label
                      htmlFor="subjects"
                      id="subjectTitle"
                    />
                  </TextBody>,
                  <Connect(DropDownComponent)
                    accessID="Subject"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    ddId="ddlSubject"
                    id="subjects"
                    name="subjects"
                    selectSubject={[Function]}
                    selectedValue={undefined}
                    showSubjectError={false}
                    subjectErrors={undefined}
                    subjects={undefined}
                  />,
                  <TextBody>
                    <Label
                      htmlFor="subjects"
                      id="relatesTitle"
                    />
                  </TextBody>,
                  <Connect(DropDownComponent)
                    accessID="Message relates to"
                    accounts={undefined}
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    ddId="ddlAccount"
                    id="accounts"
                    name="accounts"
                    selectSubject={[Function]}
                    selectedValue={undefined}
                    showAccountError={false}
                  />,
                  <TextBody>
                    <Label
                      htmlFor="subjects"
                      id="messageTitle"
                    />
                  </TextBody>,
                  <TextBody>
                    <div
                      className="u-visually-hidden off-screen"
                      id="textAreaMaxMsg"
                    />
                    <TextAreaWrapper
                      charsLeftDisplayThreshold={300}
                      cols="20"
                      content={
                        Object {
                          "back": "Back",
                        }
                      }
                      id="message"
                      maxChars={3000}
                      onChange={[Function]}
                      rows="20"
                      value={undefined}
                    />
                  </TextBody>,
                  <TextBody>
                    <ButtonGroup
                      alignment="left"
                    >
                      <Button
                        disabled={false}
                        display="secondary"
                        isLoading={false}
                        name="Back"
                        onClick={[Function]}
                        size="md"
                        width="flush"
                      >
                        Back
                      </Button>
                      <Button
                        disabled={false}
                        display="primary"
                        isLoading={false}
                        name="Save Draft"
                        onClick={[Function]}
                        size="md"
                      />
                      <Button
                        disabled={false}
                        display="primary"
                        isLoading={false}
                        name="Send"
                        onClick={[Function]}
                        size="md"
                      />
                    </ButtonGroup>
                  </TextBody>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": undefined,
                    "size": "h4",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <BackButton
                      disabled={false}
                      label="Back"
                      onClick={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "disabled": false,
                      "label": "Back",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Label
                      htmlFor="subjects"
                      id="subjectTitle"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": undefined,
                      "htmlFor": "subjects",
                      "id": "subjectTitle",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "accessID": "Subject",
                    "content": Object {
                      "back": "Back",
                    },
                    "ddId": "ddlSubject",
                    "id": "subjects",
                    "name": "subjects",
                    "selectSubject": [Function],
                    "selectedValue": undefined,
                    "showSubjectError": false,
                    "subjectErrors": undefined,
                    "subjects": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Label
                      htmlFor="subjects"
                      id="relatesTitle"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": undefined,
                      "htmlFor": "subjects",
                      "id": "relatesTitle",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "accessID": "Message relates to",
                    "accounts": undefined,
                    "content": Object {
                      "back": "Back",
                    },
                    "ddId": "ddlAccount",
                    "id": "accounts",
                    "name": "accounts",
                    "selectSubject": [Function],
                    "selectedValue": undefined,
                    "showAccountError": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Label
                      htmlFor="subjects"
                      id="messageTitle"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": undefined,
                      "htmlFor": "subjects",
                      "id": "messageTitle",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <div
                        className="u-visually-hidden off-screen"
                        id="textAreaMaxMsg"
                      />,
                      <TextAreaWrapper
                        charsLeftDisplayThreshold={300}
                        cols="20"
                        content={
                          Object {
                            "back": "Back",
                          }
                        }
                        id="message"
                        maxChars={3000}
                        onChange={[Function]}
                        rows="20"
                        value={undefined}
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": undefined,
                        "className": "u-visually-hidden off-screen",
                        "id": "textAreaMaxMsg",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "charsLeftDisplayThreshold": 300,
                        "cols": "20",
                        "content": Object {
                          "back": "Back",
                        },
                        "id": "message",
                        "maxChars": 3000,
                        "onChange": [Function],
                        "rows": "20",
                        "value": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <ButtonGroup
                      alignment="left"
                    >
                      <Button
                        disabled={false}
                        display="secondary"
                        isLoading={false}
                        name="Back"
                        onClick={[Function]}
                        size="md"
                        width="flush"
                      >
                        Back
                      </Button>
                      <Button
                        disabled={false}
                        display="primary"
                        isLoading={false}
                        name="Save Draft"
                        onClick={[Function]}
                        size="md"
                      />
                      <Button
                        disabled={false}
                        display="primary"
                        isLoading={false}
                        name="Send"
                        onClick={[Function]}
                        size="md"
                      />
                    </ButtonGroup>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "alignment": "left",
                      "children": Array [
                        <Button
                          disabled={false}
                          display="secondary"
                          isLoading={false}
                          name="Back"
                          onClick={[Function]}
                          size="md"
                          width="flush"
                        >
                          Back
                        </Button>,
                        <Button
                          disabled={false}
                          display="primary"
                          isLoading={false}
                          name="Save Draft"
                          onClick={[Function]}
                          size="md"
                        />,
                        <Button
                          disabled={false}
                          display="primary"
                          isLoading={false}
                          name="Send"
                          onClick={[Function]}
                          size="md"
                        />,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Back",
                          "disabled": false,
                          "display": "secondary",
                          "isLoading": false,
                          "name": "Back",
                          "onClick": [Function],
                          "size": "md",
                          "width": "flush",
                        },
                        "ref": null,
                        "rendered": "Back",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": undefined,
                          "disabled": false,
                          "display": "primary",
                          "isLoading": false,
                          "name": "Save Draft",
                          "onClick": [Function],
                          "size": "md",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": undefined,
                          "disabled": false,
                          "display": "primary",
                          "isLoading": false,
                          "name": "Send",
                          "onClick": [Function],
                          "size": "md",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        false,
        "",
        false,
        undefined,
        undefined,
        undefined,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
