// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ViewMessage
    activeTab="SENT"
    content={
      Object {
        "sentPageTitle": "sentPageTitle",
      }
    }
    location={
      Object {
        "messageDetail": Object {
          "status": "sent",
        },
      }
    }
    messages={
      Object {
        "draftError": true,
        "filter": [MockFunction],
        "successModal": true,
      }
    }
    messagesFetched={
      Object {
        "fetching": false,
        "successModal": false,
      }
    }
    setViewMessageDetail={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "status": "sent",
            },
          ],
        ],
      }
    }
    successModal={true}
    updateMessageData={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Row>
        <Card
          bordered={false}
        >
          <SectionHeading
            className="u-margin-bottom-2"
            heading1={undefined}
          />
          <Connect(withRouter(withMessaging))
            activeTab="SENT"
            content={
              Object {
                "sentPageTitle": "sentPageTitle",
              }
            }
            hasAttachment={undefined}
            location={
              Object {
                "messageDetail": Object {
                  "status": "sent",
                },
              }
            }
            messages={
              Object {
                "draftError": true,
                "filter": [MockFunction],
                "successModal": true,
              }
            }
            messagesFetched={
              Object {
                "fetching": false,
                "successModal": false,
              }
            }
            newMessageStatus="sent"
            setViewMessageDetail={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "sent",
                    },
                  ],
                ],
              }
            }
            successModal={true}
            updateMessageData={[MockFunction]}
          />
        </Card>
      </Row>,
      "size": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Card
          bordered={false}
        >
          <SectionHeading
            className="u-margin-bottom-2"
            heading1={undefined}
          />
          <Connect(withRouter(withMessaging))
            activeTab="SENT"
            content={
              Object {
                "sentPageTitle": "sentPageTitle",
              }
            }
            hasAttachment={undefined}
            location={
              Object {
                "messageDetail": Object {
                  "status": "sent",
                },
              }
            }
            messages={
              Object {
                "draftError": true,
                "filter": [MockFunction],
                "successModal": true,
              }
            }
            messagesFetched={
              Object {
                "fetching": false,
                "successModal": false,
              }
            }
            newMessageStatus="sent"
            setViewMessageDetail={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "sent",
                    },
                  ],
                ],
              }
            }
            successModal={true}
            updateMessageData={[MockFunction]}
          />
        </Card>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "bordered": false,
          "children": Array [
            <SectionHeading
              className="u-margin-bottom-2"
              heading1={undefined}
            />,
            <Connect(withRouter(withMessaging))
              activeTab="SENT"
              content={
                Object {
                  "sentPageTitle": "sentPageTitle",
                }
              }
              hasAttachment={undefined}
              location={
                Object {
                  "messageDetail": Object {
                    "status": "sent",
                  },
                }
              }
              messages={
                Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                }
              }
              messagesFetched={
                Object {
                  "fetching": false,
                  "successModal": false,
                }
              }
              newMessageStatus="sent"
              setViewMessageDetail={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "sent",
                      },
                    ],
                  ],
                }
              }
              successModal={true}
              updateMessageData={[MockFunction]}
            />,
            Array [],
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "u-margin-bottom-2",
              "heading1": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activeTab": "SENT",
              "content": Object {
                "sentPageTitle": "sentPageTitle",
              },
              "hasAttachment": undefined,
              "location": Object {
                "messageDetail": Object {
                  "status": "sent",
                },
              },
              "messages": Object {
                "draftError": true,
                "filter": [MockFunction],
                "successModal": true,
              },
              "messagesFetched": Object {
                "fetching": false,
                "successModal": false,
              },
              "newMessageStatus": "sent",
              "setViewMessageDetail": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "sent",
                    },
                  ],
                ],
              },
              "successModal": true,
              "updateMessageData": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Row>
          <Card
            bordered={false}
          >
            <SectionHeading
              className="u-margin-bottom-2"
              heading1={undefined}
            />
            <Connect(withRouter(withMessaging))
              activeTab="SENT"
              content={
                Object {
                  "sentPageTitle": "sentPageTitle",
                }
              }
              hasAttachment={undefined}
              location={
                Object {
                  "messageDetail": Object {
                    "status": "sent",
                  },
                }
              }
              messages={
                Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                }
              }
              messagesFetched={
                Object {
                  "fetching": false,
                  "successModal": false,
                }
              }
              newMessageStatus="sent"
              setViewMessageDetail={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "sent",
                      },
                    ],
                  ],
                }
              }
              successModal={true}
              updateMessageData={[MockFunction]}
            />
          </Card>
        </Row>,
        "size": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Card
            bordered={false}
          >
            <SectionHeading
              className="u-margin-bottom-2"
              heading1={undefined}
            />
            <Connect(withRouter(withMessaging))
              activeTab="SENT"
              content={
                Object {
                  "sentPageTitle": "sentPageTitle",
                }
              }
              hasAttachment={undefined}
              location={
                Object {
                  "messageDetail": Object {
                    "status": "sent",
                  },
                }
              }
              messages={
                Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                }
              }
              messagesFetched={
                Object {
                  "fetching": false,
                  "successModal": false,
                }
              }
              newMessageStatus="sent"
              setViewMessageDetail={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "sent",
                      },
                    ],
                  ],
                }
              }
              successModal={true}
              updateMessageData={[MockFunction]}
            />
          </Card>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "bordered": false,
            "children": Array [
              <SectionHeading
                className="u-margin-bottom-2"
                heading1={undefined}
              />,
              <Connect(withRouter(withMessaging))
                activeTab="SENT"
                content={
                  Object {
                    "sentPageTitle": "sentPageTitle",
                  }
                }
                hasAttachment={undefined}
                location={
                  Object {
                    "messageDetail": Object {
                      "status": "sent",
                    },
                  }
                }
                messages={
                  Object {
                    "draftError": true,
                    "filter": [MockFunction],
                    "successModal": true,
                  }
                }
                messagesFetched={
                  Object {
                    "fetching": false,
                    "successModal": false,
                  }
                }
                newMessageStatus="sent"
                setViewMessageDetail={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "status": "sent",
                        },
                      ],
                    ],
                  }
                }
                successModal={true}
                updateMessageData={[MockFunction]}
              />,
              Array [],
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "u-margin-bottom-2",
                "heading1": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "activeTab": "SENT",
                "content": Object {
                  "sentPageTitle": "sentPageTitle",
                },
                "hasAttachment": undefined,
                "location": Object {
                  "messageDetail": Object {
                    "status": "sent",
                  },
                },
                "messages": Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                },
                "messagesFetched": Object {
                  "fetching": false,
                  "successModal": false,
                },
                "newMessageStatus": "sent",
                "setViewMessageDetail": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "sent",
                      },
                    ],
                  ],
                },
                "successModal": true,
                "updateMessageData": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`View Message snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ViewMessage
    activeTab="SENT"
    content={
      Object {
        "back": "Back",
      }
    }
    dispatch={[MockFunction]}
    location={
      Object {
        "messageDetail": Object {
          "status": "NEW",
        },
      }
    }
    messages={
      Object {
        "draftError": true,
        "filter": [MockFunction],
        "successModal": true,
      }
    }
    messagesFetched={
      Object {
        "fetching": false,
        "successModal": false,
      }
    }
    setViewMessageDetail={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "status": "NEW",
            },
          ],
        ],
      }
    }
    updateMessageData={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "status": "NEW",
            },
            undefined,
            "READ",
          ],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Row>
        <Card
          bordered={false}
        >
          <SectionHeading
            className="u-margin-bottom-2"
            heading1={undefined}
          />
          <Connect(withRouter(withMessaging))
            activeTab="SENT"
            content={
              Object {
                "back": "Back",
              }
            }
            dispatch={[MockFunction]}
            hasAttachment={undefined}
            location={
              Object {
                "messageDetail": Object {
                  "status": "NEW",
                },
              }
            }
            messages={
              Object {
                "draftError": true,
                "filter": [MockFunction],
                "successModal": true,
              }
            }
            messagesFetched={
              Object {
                "fetching": false,
                "successModal": false,
              }
            }
            newMessageStatus="READ"
            setViewMessageDetail={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "NEW",
                    },
                  ],
                ],
              }
            }
            updateMessageData={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "NEW",
                    },
                    undefined,
                    "READ",
                  ],
                ],
              }
            }
          />
        </Card>
      </Row>,
      "size": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Card
          bordered={false}
        >
          <SectionHeading
            className="u-margin-bottom-2"
            heading1={undefined}
          />
          <Connect(withRouter(withMessaging))
            activeTab="SENT"
            content={
              Object {
                "back": "Back",
              }
            }
            dispatch={[MockFunction]}
            hasAttachment={undefined}
            location={
              Object {
                "messageDetail": Object {
                  "status": "NEW",
                },
              }
            }
            messages={
              Object {
                "draftError": true,
                "filter": [MockFunction],
                "successModal": true,
              }
            }
            messagesFetched={
              Object {
                "fetching": false,
                "successModal": false,
              }
            }
            newMessageStatus="READ"
            setViewMessageDetail={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "NEW",
                    },
                  ],
                ],
              }
            }
            updateMessageData={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "NEW",
                    },
                    undefined,
                    "READ",
                  ],
                ],
              }
            }
          />
        </Card>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "bordered": false,
          "children": Array [
            <SectionHeading
              className="u-margin-bottom-2"
              heading1={undefined}
            />,
            <Connect(withRouter(withMessaging))
              activeTab="SENT"
              content={
                Object {
                  "back": "Back",
                }
              }
              dispatch={[MockFunction]}
              hasAttachment={undefined}
              location={
                Object {
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                }
              }
              messages={
                Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                }
              }
              messagesFetched={
                Object {
                  "fetching": false,
                  "successModal": false,
                }
              }
              newMessageStatus="READ"
              setViewMessageDetail={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                    ],
                  ],
                }
              }
              updateMessageData={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                      undefined,
                      "READ",
                    ],
                  ],
                }
              }
            />,
            Array [],
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "u-margin-bottom-2",
              "heading1": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activeTab": "SENT",
              "content": Object {
                "back": "Back",
              },
              "dispatch": [MockFunction],
              "hasAttachment": undefined,
              "location": Object {
                "messageDetail": Object {
                  "status": "NEW",
                },
              },
              "messages": Object {
                "draftError": true,
                "filter": [MockFunction],
                "successModal": true,
              },
              "messagesFetched": Object {
                "fetching": false,
                "successModal": false,
              },
              "newMessageStatus": "READ",
              "setViewMessageDetail": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "NEW",
                    },
                  ],
                ],
              },
              "updateMessageData": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "status": "NEW",
                    },
                    undefined,
                    "READ",
                  ],
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Row>
          <Card
            bordered={false}
          >
            <SectionHeading
              className="u-margin-bottom-2"
              heading1={undefined}
            />
            <Connect(withRouter(withMessaging))
              activeTab="SENT"
              content={
                Object {
                  "back": "Back",
                }
              }
              dispatch={[MockFunction]}
              hasAttachment={undefined}
              location={
                Object {
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                }
              }
              messages={
                Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                }
              }
              messagesFetched={
                Object {
                  "fetching": false,
                  "successModal": false,
                }
              }
              newMessageStatus="READ"
              setViewMessageDetail={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                    ],
                  ],
                }
              }
              updateMessageData={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                      undefined,
                      "READ",
                    ],
                  ],
                }
              }
            />
          </Card>
        </Row>,
        "size": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Card
            bordered={false}
          >
            <SectionHeading
              className="u-margin-bottom-2"
              heading1={undefined}
            />
            <Connect(withRouter(withMessaging))
              activeTab="SENT"
              content={
                Object {
                  "back": "Back",
                }
              }
              dispatch={[MockFunction]}
              hasAttachment={undefined}
              location={
                Object {
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                }
              }
              messages={
                Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                }
              }
              messagesFetched={
                Object {
                  "fetching": false,
                  "successModal": false,
                }
              }
              newMessageStatus="READ"
              setViewMessageDetail={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                    ],
                  ],
                }
              }
              updateMessageData={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                      undefined,
                      "READ",
                    ],
                  ],
                }
              }
            />
          </Card>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "bordered": false,
            "children": Array [
              <SectionHeading
                className="u-margin-bottom-2"
                heading1={undefined}
              />,
              <Connect(withRouter(withMessaging))
                activeTab="SENT"
                content={
                  Object {
                    "back": "Back",
                  }
                }
                dispatch={[MockFunction]}
                hasAttachment={undefined}
                location={
                  Object {
                    "messageDetail": Object {
                      "status": "NEW",
                    },
                  }
                }
                messages={
                  Object {
                    "draftError": true,
                    "filter": [MockFunction],
                    "successModal": true,
                  }
                }
                messagesFetched={
                  Object {
                    "fetching": false,
                    "successModal": false,
                  }
                }
                newMessageStatus="READ"
                setViewMessageDetail={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "status": "NEW",
                        },
                      ],
                    ],
                  }
                }
                updateMessageData={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "status": "NEW",
                        },
                        undefined,
                        "READ",
                      ],
                    ],
                  }
                }
              />,
              Array [],
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "u-margin-bottom-2",
                "heading1": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "activeTab": "SENT",
                "content": Object {
                  "back": "Back",
                },
                "dispatch": [MockFunction],
                "hasAttachment": undefined,
                "location": Object {
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                },
                "messages": Object {
                  "draftError": true,
                  "filter": [MockFunction],
                  "successModal": true,
                },
                "messagesFetched": Object {
                  "fetching": false,
                  "successModal": false,
                },
                "newMessageStatus": "READ",
                "setViewMessageDetail": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                    ],
                  ],
                },
                "updateMessageData": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "status": "NEW",
                      },
                      undefined,
                      "READ",
                    ],
                  ],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
