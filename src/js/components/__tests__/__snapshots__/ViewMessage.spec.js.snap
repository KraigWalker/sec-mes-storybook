// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ViewMessage
    activeTab="SENT"
    content={
      Object {
        "sentPageTitle": "sentPageTitle",
      }
    }
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
      }
    }
    location={
      Object {
        "messageDetail": Object {
          "status": "sent",
        },
      }
    }
    messages={
      Object {
        "draftError": true,
        "filter": [MockFunction],
        "successModal": true,
      }
    }
    messagesFetched={
      Object {
        "fetching": false,
        "successModal": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="col-md1-24 col-sm1-24 col-lg1-24"
      >
        <StepHeader
          headerCrumbsMessage="Back"
          headerCrumbsPath={
            Object {
              "pathname": "/securemessages",
            }
          }
          headerTitle={undefined}
          showControl={false}
          showheaderCrumbs={true}
        />
        <Connect(SecureMessageSummary)
          content={
            Object {
              "sentPageTitle": "sentPageTitle",
            }
          }
          message={
            Object {
              "status": "sent",
            }
          }
          readFlag={false}
          sentFlag={false}
          viewMessageFlag={true}
        />
        <pre />
        <div
          className="c-btn--group"
        >
          <Link
            className="c-btn c-btn--secondary"
            replace={false}
            to={
              Object {
                "pathname": "/securemessages",
              }
            }
          />
          <button
            className="c-btn c-btn--secondary"
            onClick={[Function]}
          />
          <Link
            className="c-btn c-btn--primary"
            id="reply-button"
            replace={false}
            to={
              Object {
                "backPath": "/securemessages/view",
                "messageDetail": Object {
                  "status": "sent",
                },
                "pathname": "/securemessages/reply",
              }
            }
          />
        </div>
        <ThreadList
          Threads={undefined}
          content={
            Object {
              "sentPageTitle": "sentPageTitle",
            }
          }
        />
      </div>,
      "className": "row centralised-container c-card",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <StepHeader
            headerCrumbsMessage="Back"
            headerCrumbsPath={
              Object {
                "pathname": "/securemessages",
              }
            }
            headerTitle={undefined}
            showControl={false}
            showheaderCrumbs={true}
          />,
          <Connect(SecureMessageSummary)
            content={
              Object {
                "sentPageTitle": "sentPageTitle",
              }
            }
            message={
              Object {
                "status": "sent",
              }
            }
            readFlag={false}
            sentFlag={false}
            viewMessageFlag={true}
          />,
          <pre />,
          undefined,
          <div
            className="c-btn--group"
          >
            <Link
              className="c-btn c-btn--secondary"
              replace={false}
              to={
                Object {
                  "pathname": "/securemessages",
                }
              }
            />
            <button
              className="c-btn c-btn--secondary"
              onClick={[Function]}
            />
            <Link
              className="c-btn c-btn--primary"
              id="reply-button"
              replace={false}
              to={
                Object {
                  "backPath": "/securemessages/view",
                  "messageDetail": Object {
                    "status": "sent",
                  },
                  "pathname": "/securemessages/reply",
                }
              }
            />
          </div>,
          false,
          false,
          false,
          <ThreadList
            Threads={undefined}
            content={
              Object {
                "sentPageTitle": "sentPageTitle",
              }
            }
          />,
        ],
        "className": "col-md1-24 col-sm1-24 col-lg1-24",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "headerCrumbsMessage": "Back",
            "headerCrumbsPath": Object {
              "pathname": "/securemessages",
            },
            "headerTitle": undefined,
            "showControl": false,
            "showheaderCrumbs": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "content": Object {
              "sentPageTitle": "sentPageTitle",
            },
            "message": Object {
              "status": "sent",
            },
            "readFlag": false,
            "sentFlag": false,
            "viewMessageFlag": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "pre",
        },
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Link
                className="c-btn c-btn--secondary"
                replace={false}
                to={
                  Object {
                    "pathname": "/securemessages",
                  }
                }
              />,
              <button
                className="c-btn c-btn--secondary"
                onClick={[Function]}
              />,
              undefined,
              <Link
                className="c-btn c-btn--primary"
                id="reply-button"
                replace={false}
                to={
                  Object {
                    "backPath": "/securemessages/view",
                    "messageDetail": Object {
                      "status": "sent",
                    },
                    "pathname": "/securemessages/reply",
                  }
                }
              />,
            ],
            "className": "c-btn--group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--secondary",
                "replace": false,
                "to": Object {
                  "pathname": "/securemessages",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--secondary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--primary",
                "id": "reply-button",
                "replace": false,
                "to": Object {
                  "backPath": "/securemessages/view",
                  "messageDetail": Object {
                    "status": "sent",
                  },
                  "pathname": "/securemessages/reply",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        false,
        false,
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "Threads": undefined,
            "content": Object {
              "sentPageTitle": "sentPageTitle",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="col-md1-24 col-sm1-24 col-lg1-24"
        >
          <StepHeader
            headerCrumbsMessage="Back"
            headerCrumbsPath={
              Object {
                "pathname": "/securemessages",
              }
            }
            headerTitle={undefined}
            showControl={false}
            showheaderCrumbs={true}
          />
          <Connect(SecureMessageSummary)
            content={
              Object {
                "sentPageTitle": "sentPageTitle",
              }
            }
            message={
              Object {
                "status": "sent",
              }
            }
            readFlag={false}
            sentFlag={false}
            viewMessageFlag={true}
          />
          <pre />
          <div
            className="c-btn--group"
          >
            <Link
              className="c-btn c-btn--secondary"
              replace={false}
              to={
                Object {
                  "pathname": "/securemessages",
                }
              }
            />
            <button
              className="c-btn c-btn--secondary"
              onClick={[Function]}
            />
            <Link
              className="c-btn c-btn--primary"
              id="reply-button"
              replace={false}
              to={
                Object {
                  "backPath": "/securemessages/view",
                  "messageDetail": Object {
                    "status": "sent",
                  },
                  "pathname": "/securemessages/reply",
                }
              }
            />
          </div>
          <ThreadList
            Threads={undefined}
            content={
              Object {
                "sentPageTitle": "sentPageTitle",
              }
            }
          />
        </div>,
        "className": "row centralised-container c-card",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <StepHeader
              headerCrumbsMessage="Back"
              headerCrumbsPath={
                Object {
                  "pathname": "/securemessages",
                }
              }
              headerTitle={undefined}
              showControl={false}
              showheaderCrumbs={true}
            />,
            <Connect(SecureMessageSummary)
              content={
                Object {
                  "sentPageTitle": "sentPageTitle",
                }
              }
              message={
                Object {
                  "status": "sent",
                }
              }
              readFlag={false}
              sentFlag={false}
              viewMessageFlag={true}
            />,
            <pre />,
            undefined,
            <div
              className="c-btn--group"
            >
              <Link
                className="c-btn c-btn--secondary"
                replace={false}
                to={
                  Object {
                    "pathname": "/securemessages",
                  }
                }
              />
              <button
                className="c-btn c-btn--secondary"
                onClick={[Function]}
              />
              <Link
                className="c-btn c-btn--primary"
                id="reply-button"
                replace={false}
                to={
                  Object {
                    "backPath": "/securemessages/view",
                    "messageDetail": Object {
                      "status": "sent",
                    },
                    "pathname": "/securemessages/reply",
                  }
                }
              />
            </div>,
            false,
            false,
            false,
            <ThreadList
              Threads={undefined}
              content={
                Object {
                  "sentPageTitle": "sentPageTitle",
                }
              }
            />,
          ],
          "className": "col-md1-24 col-sm1-24 col-lg1-24",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "headerCrumbsMessage": "Back",
              "headerCrumbsPath": Object {
                "pathname": "/securemessages",
              },
              "headerTitle": undefined,
              "showControl": false,
              "showheaderCrumbs": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "content": Object {
                "sentPageTitle": "sentPageTitle",
              },
              "message": Object {
                "status": "sent",
              },
              "readFlag": false,
              "sentFlag": false,
              "viewMessageFlag": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "pre",
          },
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Link
                  className="c-btn c-btn--secondary"
                  replace={false}
                  to={
                    Object {
                      "pathname": "/securemessages",
                    }
                  }
                />,
                <button
                  className="c-btn c-btn--secondary"
                  onClick={[Function]}
                />,
                undefined,
                <Link
                  className="c-btn c-btn--primary"
                  id="reply-button"
                  replace={false}
                  to={
                    Object {
                      "backPath": "/securemessages/view",
                      "messageDetail": Object {
                        "status": "sent",
                      },
                      "pathname": "/securemessages/reply",
                    }
                  }
                />,
              ],
              "className": "c-btn--group",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--secondary",
                  "replace": false,
                  "to": Object {
                    "pathname": "/securemessages",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--secondary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
              undefined,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--primary",
                  "id": "reply-button",
                  "replace": false,
                  "to": Object {
                    "backPath": "/securemessages/view",
                    "messageDetail": Object {
                      "status": "sent",
                    },
                    "pathname": "/securemessages/reply",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          false,
          false,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "Threads": undefined,
              "content": Object {
                "sentPageTitle": "sentPageTitle",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`View Message snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ViewMessage
    activeTab="SENT"
    content={
      Object {
        "back": "Back",
      }
    }
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
      }
    }
    location={
      Object {
        "messageDetail": Object {
          "status": "NEW",
        },
      }
    }
    messages={
      Object {
        "draftError": true,
        "filter": [MockFunction],
        "successModal": true,
      }
    }
    messagesFetched={
      Object {
        "fetching": false,
        "successModal": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="col-md1-24 col-sm1-24 col-lg1-24"
      >
        <StepHeader
          headerCrumbsMessage="Back"
          headerCrumbsPath={
            Object {
              "pathname": "/securemessages",
            }
          }
          headerTitle={undefined}
          showControl={false}
          showheaderCrumbs={true}
        />
        <Connect(SecureMessageSummary)
          content={
            Object {
              "back": "Back",
            }
          }
          message={
            Object {
              "status": "NEW",
            }
          }
          readFlag={false}
          sentFlag={false}
          viewMessageFlag={true}
        />
        <pre />
        <div
          className="c-btn--group"
        >
          <Link
            className="c-btn c-btn--secondary"
            replace={false}
            to={
              Object {
                "pathname": "/securemessages",
              }
            }
          >
            Back
          </Link>
          <button
            className="c-btn c-btn--secondary"
            onClick={[Function]}
          />
          <Link
            className="c-btn c-btn--primary"
            id="reply-button"
            replace={false}
            to={
              Object {
                "backPath": "/securemessages/view",
                "messageDetail": Object {
                  "status": "NEW",
                },
                "pathname": "/securemessages/reply",
              }
            }
          />
        </div>
        <ModalComponent
          backdrop={true}
          closeButton={true}
          customClass="c-modal"
          modalInContainer={false}
          modalbody={
            <div
              className="callout callout__error"
            />
          }
          modalfooter={
            <div>
              <button
                className="c-btn c-btn--secondary c-modal__button"
                onClick={[Function]}
                type="button"
              />
              <button
                className="c-btn c-btn--default c-modal__button"
                onClick={[Function]}
                type="button"
              />
            </div>
          }
          modalheading=""
          onHide={[Function]}
          scope={undefined}
          show={true}
        />
        <ModalComponent
          backdrop={true}
          bsSize="small"
          closeButton={false}
          customClass="c-modal c-modal--center"
          modalInContainer={false}
          modalbody={
            <div>
              <div>
                <CommonGetIcon
                  height="68px"
                  id="icon-success"
                  width="68px"
                />
              </div>
            </div>
          }
          modalfooter={
            <Link
              className="c-btn c-btn--default c-btn--sm c-modal__button"
              onClick={[Function]}
              replace={false}
              to="/securemessages"
            />
          }
          modalheading=""
          onHide={[Function]}
          scope={undefined}
          show={true}
        />
        <ModalComponent
          backdrop={true}
          bsSize="medium"
          closeButton={true}
          customClass="c-modal c-modal--center"
          modalInContainer={false}
          modalbody={
            <div>
              <h3 />
              <br />
              <p />
              <br />
              <p />
            </div>
          }
          modalfooter={
            <div>
              <button
                className="c-btn c-btn--secondary c-modal__button"
                onClick={[Function]}
                type="button"
              >
                Back
              </button>
              <button
                className="c-btn c-btn--default c-modal__button"
                onClick={[Function]}
                type="button"
              />
            </div>
          }
          modalheading=""
          onHide={[Function]}
          scope={undefined}
          show={true}
        />
        <ThreadList
          Threads={undefined}
          content={
            Object {
              "back": "Back",
            }
          }
        />
      </div>,
      "className": "row centralised-container c-card",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <StepHeader
            headerCrumbsMessage="Back"
            headerCrumbsPath={
              Object {
                "pathname": "/securemessages",
              }
            }
            headerTitle={undefined}
            showControl={false}
            showheaderCrumbs={true}
          />,
          <Connect(SecureMessageSummary)
            content={
              Object {
                "back": "Back",
              }
            }
            message={
              Object {
                "status": "NEW",
              }
            }
            readFlag={false}
            sentFlag={false}
            viewMessageFlag={true}
          />,
          <pre />,
          undefined,
          <div
            className="c-btn--group"
          >
            <Link
              className="c-btn c-btn--secondary"
              replace={false}
              to={
                Object {
                  "pathname": "/securemessages",
                }
              }
            >
              Back
            </Link>
            <button
              className="c-btn c-btn--secondary"
              onClick={[Function]}
            />
            <Link
              className="c-btn c-btn--primary"
              id="reply-button"
              replace={false}
              to={
                Object {
                  "backPath": "/securemessages/view",
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                  "pathname": "/securemessages/reply",
                }
              }
            />
          </div>,
          <ModalComponent
            backdrop={true}
            closeButton={true}
            customClass="c-modal"
            modalInContainer={false}
            modalbody={
              <div
                className="callout callout__error"
              />
            }
            modalfooter={
              <div>
                <button
                  className="c-btn c-btn--secondary c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
                <button
                  className="c-btn c-btn--default c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
              </div>
            }
            modalheading=""
            onHide={[Function]}
            scope={undefined}
            show={true}
          />,
          <ModalComponent
            backdrop={true}
            bsSize="small"
            closeButton={false}
            customClass="c-modal c-modal--center"
            modalInContainer={false}
            modalbody={
              <div>
                <div>
                  <CommonGetIcon
                    height="68px"
                    id="icon-success"
                    width="68px"
                  />
                </div>
              </div>
            }
            modalfooter={
              <Link
                className="c-btn c-btn--default c-btn--sm c-modal__button"
                onClick={[Function]}
                replace={false}
                to="/securemessages"
              />
            }
            modalheading=""
            onHide={[Function]}
            scope={undefined}
            show={true}
          />,
          <ModalComponent
            backdrop={true}
            bsSize="medium"
            closeButton={true}
            customClass="c-modal c-modal--center"
            modalInContainer={false}
            modalbody={
              <div>
                <h3 />
                <br />
                <p />
                <br />
                <p />
              </div>
            }
            modalfooter={
              <div>
                <button
                  className="c-btn c-btn--secondary c-modal__button"
                  onClick={[Function]}
                  type="button"
                >
                  Back
                </button>
                <button
                  className="c-btn c-btn--default c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
              </div>
            }
            modalheading=""
            onHide={[Function]}
            scope={undefined}
            show={true}
          />,
          <ThreadList
            Threads={undefined}
            content={
              Object {
                "back": "Back",
              }
            }
          />,
        ],
        "className": "col-md1-24 col-sm1-24 col-lg1-24",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "headerCrumbsMessage": "Back",
            "headerCrumbsPath": Object {
              "pathname": "/securemessages",
            },
            "headerTitle": undefined,
            "showControl": false,
            "showheaderCrumbs": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "content": Object {
              "back": "Back",
            },
            "message": Object {
              "status": "NEW",
            },
            "readFlag": false,
            "sentFlag": false,
            "viewMessageFlag": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "pre",
        },
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Link
                className="c-btn c-btn--secondary"
                replace={false}
                to={
                  Object {
                    "pathname": "/securemessages",
                  }
                }
              >
                Back
              </Link>,
              <button
                className="c-btn c-btn--secondary"
                onClick={[Function]}
              />,
              undefined,
              <Link
                className="c-btn c-btn--primary"
                id="reply-button"
                replace={false}
                to={
                  Object {
                    "backPath": "/securemessages/view",
                    "messageDetail": Object {
                      "status": "NEW",
                    },
                    "pathname": "/securemessages/reply",
                  }
                }
              />,
            ],
            "className": "c-btn--group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Back",
                "className": "c-btn c-btn--secondary",
                "replace": false,
                "to": Object {
                  "pathname": "/securemessages",
                },
              },
              "ref": null,
              "rendered": "Back",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--secondary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--primary",
                "id": "reply-button",
                "replace": false,
                "to": Object {
                  "backPath": "/securemessages/view",
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                  "pathname": "/securemessages/reply",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "backdrop": true,
            "closeButton": true,
            "customClass": "c-modal",
            "modalInContainer": false,
            "modalbody": <div
              className="callout callout__error"
            />,
            "modalfooter": <div>
              <button
                className="c-btn c-btn--secondary c-modal__button"
                onClick={[Function]}
                type="button"
              />
              <button
                className="c-btn c-btn--default c-modal__button"
                onClick={[Function]}
                type="button"
              />
            </div>,
            "modalheading": "",
            "onHide": [Function],
            "scope": undefined,
            "show": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "backdrop": true,
            "bsSize": "small",
            "closeButton": false,
            "customClass": "c-modal c-modal--center",
            "modalInContainer": false,
            "modalbody": <div>
              <div>
                <CommonGetIcon
                  height="68px"
                  id="icon-success"
                  width="68px"
                />
              </div>
            </div>,
            "modalfooter": <Link
              className="c-btn c-btn--default c-btn--sm c-modal__button"
              onClick={[Function]}
              replace={false}
              to="/securemessages"
            />,
            "modalheading": "",
            "onHide": [Function],
            "scope": undefined,
            "show": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "backdrop": true,
            "bsSize": "medium",
            "closeButton": true,
            "customClass": "c-modal c-modal--center",
            "modalInContainer": false,
            "modalbody": <div>
              <h3 />
              <br />
              <p />
              <br />
              <p />
            </div>,
            "modalfooter": <div>
              <button
                className="c-btn c-btn--secondary c-modal__button"
                onClick={[Function]}
                type="button"
              >
                Back
              </button>
              <button
                className="c-btn c-btn--default c-modal__button"
                onClick={[Function]}
                type="button"
              />
            </div>,
            "modalheading": "",
            "onHide": [Function],
            "scope": undefined,
            "show": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "Threads": undefined,
            "content": Object {
              "back": "Back",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="col-md1-24 col-sm1-24 col-lg1-24"
        >
          <StepHeader
            headerCrumbsMessage="Back"
            headerCrumbsPath={
              Object {
                "pathname": "/securemessages",
              }
            }
            headerTitle={undefined}
            showControl={false}
            showheaderCrumbs={true}
          />
          <Connect(SecureMessageSummary)
            content={
              Object {
                "back": "Back",
              }
            }
            message={
              Object {
                "status": "NEW",
              }
            }
            readFlag={false}
            sentFlag={false}
            viewMessageFlag={true}
          />
          <pre />
          <div
            className="c-btn--group"
          >
            <Link
              className="c-btn c-btn--secondary"
              replace={false}
              to={
                Object {
                  "pathname": "/securemessages",
                }
              }
            >
              Back
            </Link>
            <button
              className="c-btn c-btn--secondary"
              onClick={[Function]}
            />
            <Link
              className="c-btn c-btn--primary"
              id="reply-button"
              replace={false}
              to={
                Object {
                  "backPath": "/securemessages/view",
                  "messageDetail": Object {
                    "status": "NEW",
                  },
                  "pathname": "/securemessages/reply",
                }
              }
            />
          </div>
          <ModalComponent
            backdrop={true}
            closeButton={true}
            customClass="c-modal"
            modalInContainer={false}
            modalbody={
              <div
                className="callout callout__error"
              />
            }
            modalfooter={
              <div>
                <button
                  className="c-btn c-btn--secondary c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
                <button
                  className="c-btn c-btn--default c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
              </div>
            }
            modalheading=""
            onHide={[Function]}
            scope={undefined}
            show={true}
          />
          <ModalComponent
            backdrop={true}
            bsSize="small"
            closeButton={false}
            customClass="c-modal c-modal--center"
            modalInContainer={false}
            modalbody={
              <div>
                <div>
                  <CommonGetIcon
                    height="68px"
                    id="icon-success"
                    width="68px"
                  />
                </div>
              </div>
            }
            modalfooter={
              <Link
                className="c-btn c-btn--default c-btn--sm c-modal__button"
                onClick={[Function]}
                replace={false}
                to="/securemessages"
              />
            }
            modalheading=""
            onHide={[Function]}
            scope={undefined}
            show={true}
          />
          <ModalComponent
            backdrop={true}
            bsSize="medium"
            closeButton={true}
            customClass="c-modal c-modal--center"
            modalInContainer={false}
            modalbody={
              <div>
                <h3 />
                <br />
                <p />
                <br />
                <p />
              </div>
            }
            modalfooter={
              <div>
                <button
                  className="c-btn c-btn--secondary c-modal__button"
                  onClick={[Function]}
                  type="button"
                >
                  Back
                </button>
                <button
                  className="c-btn c-btn--default c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
              </div>
            }
            modalheading=""
            onHide={[Function]}
            scope={undefined}
            show={true}
          />
          <ThreadList
            Threads={undefined}
            content={
              Object {
                "back": "Back",
              }
            }
          />
        </div>,
        "className": "row centralised-container c-card",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <StepHeader
              headerCrumbsMessage="Back"
              headerCrumbsPath={
                Object {
                  "pathname": "/securemessages",
                }
              }
              headerTitle={undefined}
              showControl={false}
              showheaderCrumbs={true}
            />,
            <Connect(SecureMessageSummary)
              content={
                Object {
                  "back": "Back",
                }
              }
              message={
                Object {
                  "status": "NEW",
                }
              }
              readFlag={false}
              sentFlag={false}
              viewMessageFlag={true}
            />,
            <pre />,
            undefined,
            <div
              className="c-btn--group"
            >
              <Link
                className="c-btn c-btn--secondary"
                replace={false}
                to={
                  Object {
                    "pathname": "/securemessages",
                  }
                }
              >
                Back
              </Link>
              <button
                className="c-btn c-btn--secondary"
                onClick={[Function]}
              />
              <Link
                className="c-btn c-btn--primary"
                id="reply-button"
                replace={false}
                to={
                  Object {
                    "backPath": "/securemessages/view",
                    "messageDetail": Object {
                      "status": "NEW",
                    },
                    "pathname": "/securemessages/reply",
                  }
                }
              />
            </div>,
            <ModalComponent
              backdrop={true}
              closeButton={true}
              customClass="c-modal"
              modalInContainer={false}
              modalbody={
                <div
                  className="callout callout__error"
                />
              }
              modalfooter={
                <div>
                  <button
                    className="c-btn c-btn--secondary c-modal__button"
                    onClick={[Function]}
                    type="button"
                  />
                  <button
                    className="c-btn c-btn--default c-modal__button"
                    onClick={[Function]}
                    type="button"
                  />
                </div>
              }
              modalheading=""
              onHide={[Function]}
              scope={undefined}
              show={true}
            />,
            <ModalComponent
              backdrop={true}
              bsSize="small"
              closeButton={false}
              customClass="c-modal c-modal--center"
              modalInContainer={false}
              modalbody={
                <div>
                  <div>
                    <CommonGetIcon
                      height="68px"
                      id="icon-success"
                      width="68px"
                    />
                  </div>
                </div>
              }
              modalfooter={
                <Link
                  className="c-btn c-btn--default c-btn--sm c-modal__button"
                  onClick={[Function]}
                  replace={false}
                  to="/securemessages"
                />
              }
              modalheading=""
              onHide={[Function]}
              scope={undefined}
              show={true}
            />,
            <ModalComponent
              backdrop={true}
              bsSize="medium"
              closeButton={true}
              customClass="c-modal c-modal--center"
              modalInContainer={false}
              modalbody={
                <div>
                  <h3 />
                  <br />
                  <p />
                  <br />
                  <p />
                </div>
              }
              modalfooter={
                <div>
                  <button
                    className="c-btn c-btn--secondary c-modal__button"
                    onClick={[Function]}
                    type="button"
                  >
                    Back
                  </button>
                  <button
                    className="c-btn c-btn--default c-modal__button"
                    onClick={[Function]}
                    type="button"
                  />
                </div>
              }
              modalheading=""
              onHide={[Function]}
              scope={undefined}
              show={true}
            />,
            <ThreadList
              Threads={undefined}
              content={
                Object {
                  "back": "Back",
                }
              }
            />,
          ],
          "className": "col-md1-24 col-sm1-24 col-lg1-24",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "headerCrumbsMessage": "Back",
              "headerCrumbsPath": Object {
                "pathname": "/securemessages",
              },
              "headerTitle": undefined,
              "showControl": false,
              "showheaderCrumbs": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "content": Object {
                "back": "Back",
              },
              "message": Object {
                "status": "NEW",
              },
              "readFlag": false,
              "sentFlag": false,
              "viewMessageFlag": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "pre",
          },
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Link
                  className="c-btn c-btn--secondary"
                  replace={false}
                  to={
                    Object {
                      "pathname": "/securemessages",
                    }
                  }
                >
                  Back
                </Link>,
                <button
                  className="c-btn c-btn--secondary"
                  onClick={[Function]}
                />,
                undefined,
                <Link
                  className="c-btn c-btn--primary"
                  id="reply-button"
                  replace={false}
                  to={
                    Object {
                      "backPath": "/securemessages/view",
                      "messageDetail": Object {
                        "status": "NEW",
                      },
                      "pathname": "/securemessages/reply",
                    }
                  }
                />,
              ],
              "className": "c-btn--group",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Back",
                  "className": "c-btn c-btn--secondary",
                  "replace": false,
                  "to": Object {
                    "pathname": "/securemessages",
                  },
                },
                "ref": null,
                "rendered": "Back",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--secondary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
              undefined,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--primary",
                  "id": "reply-button",
                  "replace": false,
                  "to": Object {
                    "backPath": "/securemessages/view",
                    "messageDetail": Object {
                      "status": "NEW",
                    },
                    "pathname": "/securemessages/reply",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "backdrop": true,
              "closeButton": true,
              "customClass": "c-modal",
              "modalInContainer": false,
              "modalbody": <div
                className="callout callout__error"
              />,
              "modalfooter": <div>
                <button
                  className="c-btn c-btn--secondary c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
                <button
                  className="c-btn c-btn--default c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
              </div>,
              "modalheading": "",
              "onHide": [Function],
              "scope": undefined,
              "show": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "backdrop": true,
              "bsSize": "small",
              "closeButton": false,
              "customClass": "c-modal c-modal--center",
              "modalInContainer": false,
              "modalbody": <div>
                <div>
                  <CommonGetIcon
                    height="68px"
                    id="icon-success"
                    width="68px"
                  />
                </div>
              </div>,
              "modalfooter": <Link
                className="c-btn c-btn--default c-btn--sm c-modal__button"
                onClick={[Function]}
                replace={false}
                to="/securemessages"
              />,
              "modalheading": "",
              "onHide": [Function],
              "scope": undefined,
              "show": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "backdrop": true,
              "bsSize": "medium",
              "closeButton": true,
              "customClass": "c-modal c-modal--center",
              "modalInContainer": false,
              "modalbody": <div>
                <h3 />
                <br />
                <p />
                <br />
                <p />
              </div>,
              "modalfooter": <div>
                <button
                  className="c-btn c-btn--secondary c-modal__button"
                  onClick={[Function]}
                  type="button"
                >
                  Back
                </button>
                <button
                  className="c-btn c-btn--default c-modal__button"
                  onClick={[Function]}
                  type="button"
                />
              </div>,
              "modalheading": "",
              "onHide": [Function],
              "scope": undefined,
              "show": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "Threads": undefined,
              "content": Object {
                "back": "Back",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
