// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`New Secure message snapshot New Secure message snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SecureMessageList
    content={
      Object {
        "back": "Back",
      }
    }
    dispatch={[MockFunction]}
    messages={
      Object {
        "slice": [MockFunction] {
          "calls": Array [
            Array [
              0,
              20,
            ],
          ],
        },
      }
    }
    messagesFetched={
      Object {
        "fetching": true,
        "successModal": true,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LoadingLocalTakeover
        show={true}
        title="loading.."
        xs={24}
      >
        <TextBody />
      </LoadingLocalTakeover>,
      "xs": 24,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <TextBody />,
        "show": true,
        "title": "loading..",
        "xs": 24,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            Array [],
            false,
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          false,
          false,
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LoadingLocalTakeover
          show={true}
          title="loading.."
          xs={24}
        >
          <TextBody />
        </LoadingLocalTakeover>,
        "xs": 24,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <TextBody />,
          "show": true,
          "title": "loading..",
          "xs": 24,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              Array [],
              false,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            false,
            false,
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`New Secure message snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SecureMessageList
    activeTab="SENT"
    content={
      Object {
        "back": "Back",
      }
    }
    dispatch={[MockFunction]}
    messages={
      Object {
        "length": 10,
        "slice": [MockFunction] {
          "calls": Array [
            Array [
              0,
              20,
            ],
            Array [
              0,
              20,
            ],
          ],
        },
      }
    }
    messagesFetched={
      Object {
        "fetching": false,
        "successModal": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LoadingLocalTakeover
        show={false}
        title="loading.."
        xs={24}
      >
        <TextBody>
          <TextStyled
            className="u-padding-top-2"
            size="uist"
          />
        </TextBody>
      </LoadingLocalTakeover>,
      "xs": 24,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <TextBody>
          <TextStyled
            className="u-padding-top-2"
            size="uist"
          />
        </TextBody>,
        "show": false,
        "title": "loading..",
        "xs": 24,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            Array [],
            false,
            <TextStyled
              className="u-padding-top-2"
              size="uist"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": undefined,
              "className": "u-padding-top-2",
              "size": "uist",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LoadingLocalTakeover
          show={false}
          title="loading.."
          xs={24}
        >
          <TextBody>
            <TextStyled
              className="u-padding-top-2"
              size="uist"
            />
          </TextBody>
        </LoadingLocalTakeover>,
        "xs": 24,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <TextBody>
            <TextStyled
              className="u-padding-top-2"
              size="uist"
            />
          </TextBody>,
          "show": false,
          "title": "loading..",
          "xs": 24,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              Array [],
              false,
              <TextStyled
                className="u-padding-top-2"
                size="uist"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": undefined,
                "className": "u-padding-top-2",
                "size": "uist",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
