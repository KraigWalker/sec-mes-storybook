// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`New Secure message snapshot should match to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NewSecureMessage
    content={
      Object {
        "back": "Back",
      }
    }
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
      }
    }
    messages={
      Object {
        "messages": Array [],
        "newMessageError": false,
        "successModal": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="col-md1-24 col-sm1-24 col-lg1-24"
      >
        <div
          className="row"
        >
          <div
            className="col-md1-18"
          >
            <StepHeader
              headerCrumbsMessage="Back"
              headerCrumbsPath={
                Object {
                  "pathname": "undefined/securemessages",
                }
              }
              headerTitle={undefined}
              onClick={[Function]}
              showControl={false}
              showheaderCrumbs={true}
            />
          </div>
        </div>
        <div
          className="c-field"
        >
          <label
            className="c-field__label c-field__label--block"
            htmlFor="subjects"
            id="subjectTitle"
          />
          <div
            className="c-field__controls u-position-relative"
          >
            <Connect(DropDownComponent)
              accessID="Subject"
              content={
                Object {
                  "back": "Back",
                }
              }
              ddId="ddlSubject"
              id="subjects"
              isFromDraft={false}
              selectSubject={[Function]}
              selectedValue={undefined}
              showSubjectError={false}
              subjects={undefined}
            />
          </div>
        </div>
        <div
          className="c-field"
        >
          <label
            className="c-field__label c-field__label--block"
            htmlFor="accounts"
            id="relatesTitle"
          />
          <div
            className="c-field__controls u-position-relative"
          >
            <Connect(DropDownComponent)
              accessID="Message relates to"
              accounts={undefined}
              content={
                Object {
                  "back": "Back",
                }
              }
              ddId="ddlAccount"
              id="accounts"
              isFromDraft={false}
              selectSubject={[Function]}
              selectedValue={undefined}
              showAccountError={false}
            />
          </div>
        </div>
        <div
          className="c-field"
        >
          <label
            className="c-field__label c-field__label--block"
            htmlFor="message"
            id="messageTitle"
          />
          <div
            className="c-field__controls"
          >
            <div
              className="u-visually-hidden off-screen"
              id="textAreaMaxMsg"
            />
            <TextAreaComponent
              accessID="messageTitle"
              ariaId="textAreaMaxMsg"
              id="message"
              textData={[Function]}
            />
          </div>
        </div>
        <div
          className="c-btn--group"
        >
          <Link
            className="c-btn c-btn--secondary"
            replace={false}
            to="undefined/securemessages"
          >
            Back
          </Link>
          <button
            className="c-btn c-btn--secondary"
            disabled={true}
            name="Save Draft"
            onClick={[Function]}
          />
          <button
            className="c-btn c-btn--default"
            disabled={true}
            name="Send"
            onClick={[Function]}
          />
        </div>
      </div>,
      "className": "row centralised-container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-md1-18"
            >
              <StepHeader
                headerCrumbsMessage="Back"
                headerCrumbsPath={
                  Object {
                    "pathname": "undefined/securemessages",
                  }
                }
                headerTitle={undefined}
                onClick={[Function]}
                showControl={false}
                showheaderCrumbs={true}
              />
            </div>
          </div>,
          <div
            className="c-field"
          >
            <label
              className="c-field__label c-field__label--block"
              htmlFor="subjects"
              id="subjectTitle"
            />
            <div
              className="c-field__controls u-position-relative"
            >
              <Connect(DropDownComponent)
                accessID="Subject"
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlSubject"
                id="subjects"
                isFromDraft={false}
                selectSubject={[Function]}
                selectedValue={undefined}
                showSubjectError={false}
                subjects={undefined}
              />
            </div>
          </div>,
          <div
            className="c-field"
          >
            <label
              className="c-field__label c-field__label--block"
              htmlFor="accounts"
              id="relatesTitle"
            />
            <div
              className="c-field__controls u-position-relative"
            >
              <Connect(DropDownComponent)
                accessID="Message relates to"
                accounts={undefined}
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlAccount"
                id="accounts"
                isFromDraft={false}
                selectSubject={[Function]}
                selectedValue={undefined}
                showAccountError={false}
              />
            </div>
          </div>,
          <div
            className="c-field"
          >
            <label
              className="c-field__label c-field__label--block"
              htmlFor="message"
              id="messageTitle"
            />
            <div
              className="c-field__controls"
            >
              <div
                className="u-visually-hidden off-screen"
                id="textAreaMaxMsg"
              />
              <TextAreaComponent
                accessID="messageTitle"
                ariaId="textAreaMaxMsg"
                id="message"
                textData={[Function]}
              />
            </div>
          </div>,
          false,
          false,
          false,
          false,
          false,
          undefined,
          <div
            className="c-btn--group"
          >
            <Link
              className="c-btn c-btn--secondary"
              replace={false}
              to="undefined/securemessages"
            >
              Back
            </Link>
            <button
              className="c-btn c-btn--secondary"
              disabled={true}
              name="Save Draft"
              onClick={[Function]}
            />
            <button
              className="c-btn c-btn--default"
              disabled={true}
              name="Send"
              onClick={[Function]}
            />
          </div>,
        ],
        "className": "col-md1-24 col-sm1-24 col-lg1-24",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-md1-18"
            >
              <StepHeader
                headerCrumbsMessage="Back"
                headerCrumbsPath={
                  Object {
                    "pathname": "undefined/securemessages",
                  }
                }
                headerTitle={undefined}
                onClick={[Function]}
                showControl={false}
                showheaderCrumbs={true}
              />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <StepHeader
                headerCrumbsMessage="Back"
                headerCrumbsPath={
                  Object {
                    "pathname": "undefined/securemessages",
                  }
                }
                headerTitle={undefined}
                onClick={[Function]}
                showControl={false}
                showheaderCrumbs={true}
              />,
              "className": "col-md1-18",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "headerCrumbsMessage": "Back",
                "headerCrumbsPath": Object {
                  "pathname": "undefined/securemessages",
                },
                "headerTitle": undefined,
                "onClick": [Function],
                "showControl": false,
                "showheaderCrumbs": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="c-field__label c-field__label--block"
                htmlFor="subjects"
                id="subjectTitle"
              />,
              <div
                className="c-field__controls u-position-relative"
              >
                <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  isFromDraft={false}
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjects={undefined}
                />
              </div>,
            ],
            "className": "c-field",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-field__label c-field__label--block",
                "htmlFor": "subjects",
                "id": "subjectTitle",
              },
              "ref": null,
              "rendered": null,
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  isFromDraft={false}
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjects={undefined}
                />,
                "className": "c-field__controls u-position-relative",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "accessID": "Subject",
                  "content": Object {
                    "back": "Back",
                  },
                  "ddId": "ddlSubject",
                  "id": "subjects",
                  "isFromDraft": false,
                  "selectSubject": [Function],
                  "selectedValue": undefined,
                  "showSubjectError": false,
                  "subjects": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="c-field__label c-field__label--block"
                htmlFor="accounts"
                id="relatesTitle"
              />,
              <div
                className="c-field__controls u-position-relative"
              >
                <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  isFromDraft={false}
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />
              </div>,
            ],
            "className": "c-field",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-field__label c-field__label--block",
                "htmlFor": "accounts",
                "id": "relatesTitle",
              },
              "ref": null,
              "rendered": null,
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  isFromDraft={false}
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />,
                "className": "c-field__controls u-position-relative",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "accessID": "Message relates to",
                  "accounts": undefined,
                  "content": Object {
                    "back": "Back",
                  },
                  "ddId": "ddlAccount",
                  "id": "accounts",
                  "isFromDraft": false,
                  "selectSubject": [Function],
                  "selectedValue": undefined,
                  "showAccountError": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="c-field__label c-field__label--block"
                htmlFor="message"
                id="messageTitle"
              />,
              <div
                className="c-field__controls"
              >
                <div
                  className="u-visually-hidden off-screen"
                  id="textAreaMaxMsg"
                />
                <TextAreaComponent
                  accessID="messageTitle"
                  ariaId="textAreaMaxMsg"
                  id="message"
                  textData={[Function]}
                />
              </div>,
              undefined,
            ],
            "className": "c-field",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-field__label c-field__label--block",
                "htmlFor": "message",
                "id": "messageTitle",
              },
              "ref": null,
              "rendered": null,
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="u-visually-hidden off-screen"
                    id="textAreaMaxMsg"
                  />,
                  <TextAreaComponent
                    accessID="messageTitle"
                    ariaId="textAreaMaxMsg"
                    id="message"
                    textData={[Function]}
                  />,
                ],
                "className": "c-field__controls",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": undefined,
                    "className": "u-visually-hidden off-screen",
                    "id": "textAreaMaxMsg",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "accessID": "messageTitle",
                    "ariaId": "textAreaMaxMsg",
                    "id": "message",
                    "textData": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            undefined,
          ],
          "type": "div",
        },
        false,
        false,
        false,
        false,
        false,
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Link
                className="c-btn c-btn--secondary"
                replace={false}
                to="undefined/securemessages"
              >
                Back
              </Link>,
              <button
                className="c-btn c-btn--secondary"
                disabled={true}
                name="Save Draft"
                onClick={[Function]}
              />,
              <button
                className="c-btn c-btn--default"
                disabled={true}
                name="Send"
                onClick={[Function]}
              />,
            ],
            "className": "c-btn--group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Back",
                "className": "c-btn c-btn--secondary",
                "replace": false,
                "to": "undefined/securemessages",
              },
              "ref": null,
              "rendered": "Back",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--secondary",
                "disabled": true,
                "name": "Save Draft",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "c-btn c-btn--default",
                "disabled": true,
                "name": "Send",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="col-md1-24 col-sm1-24 col-lg1-24"
        >
          <div
            className="row"
          >
            <div
              className="col-md1-18"
            >
              <StepHeader
                headerCrumbsMessage="Back"
                headerCrumbsPath={
                  Object {
                    "pathname": "undefined/securemessages",
                  }
                }
                headerTitle={undefined}
                onClick={[Function]}
                showControl={false}
                showheaderCrumbs={true}
              />
            </div>
          </div>
          <div
            className="c-field"
          >
            <label
              className="c-field__label c-field__label--block"
              htmlFor="subjects"
              id="subjectTitle"
            />
            <div
              className="c-field__controls u-position-relative"
            >
              <Connect(DropDownComponent)
                accessID="Subject"
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlSubject"
                id="subjects"
                isFromDraft={false}
                selectSubject={[Function]}
                selectedValue={undefined}
                showSubjectError={false}
                subjects={undefined}
              />
            </div>
          </div>
          <div
            className="c-field"
          >
            <label
              className="c-field__label c-field__label--block"
              htmlFor="accounts"
              id="relatesTitle"
            />
            <div
              className="c-field__controls u-position-relative"
            >
              <Connect(DropDownComponent)
                accessID="Message relates to"
                accounts={undefined}
                content={
                  Object {
                    "back": "Back",
                  }
                }
                ddId="ddlAccount"
                id="accounts"
                isFromDraft={false}
                selectSubject={[Function]}
                selectedValue={undefined}
                showAccountError={false}
              />
            </div>
          </div>
          <div
            className="c-field"
          >
            <label
              className="c-field__label c-field__label--block"
              htmlFor="message"
              id="messageTitle"
            />
            <div
              className="c-field__controls"
            >
              <div
                className="u-visually-hidden off-screen"
                id="textAreaMaxMsg"
              />
              <TextAreaComponent
                accessID="messageTitle"
                ariaId="textAreaMaxMsg"
                id="message"
                textData={[Function]}
              />
            </div>
          </div>
          <div
            className="c-btn--group"
          >
            <Link
              className="c-btn c-btn--secondary"
              replace={false}
              to="undefined/securemessages"
            >
              Back
            </Link>
            <button
              className="c-btn c-btn--secondary"
              disabled={true}
              name="Save Draft"
              onClick={[Function]}
            />
            <button
              className="c-btn c-btn--default"
              disabled={true}
              name="Send"
              onClick={[Function]}
            />
          </div>
        </div>,
        "className": "row centralised-container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="row"
            >
              <div
                className="col-md1-18"
              >
                <StepHeader
                  headerCrumbsMessage="Back"
                  headerCrumbsPath={
                    Object {
                      "pathname": "undefined/securemessages",
                    }
                  }
                  headerTitle={undefined}
                  onClick={[Function]}
                  showControl={false}
                  showheaderCrumbs={true}
                />
              </div>
            </div>,
            <div
              className="c-field"
            >
              <label
                className="c-field__label c-field__label--block"
                htmlFor="subjects"
                id="subjectTitle"
              />
              <div
                className="c-field__controls u-position-relative"
              >
                <Connect(DropDownComponent)
                  accessID="Subject"
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlSubject"
                  id="subjects"
                  isFromDraft={false}
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showSubjectError={false}
                  subjects={undefined}
                />
              </div>
            </div>,
            <div
              className="c-field"
            >
              <label
                className="c-field__label c-field__label--block"
                htmlFor="accounts"
                id="relatesTitle"
              />
              <div
                className="c-field__controls u-position-relative"
              >
                <Connect(DropDownComponent)
                  accessID="Message relates to"
                  accounts={undefined}
                  content={
                    Object {
                      "back": "Back",
                    }
                  }
                  ddId="ddlAccount"
                  id="accounts"
                  isFromDraft={false}
                  selectSubject={[Function]}
                  selectedValue={undefined}
                  showAccountError={false}
                />
              </div>
            </div>,
            <div
              className="c-field"
            >
              <label
                className="c-field__label c-field__label--block"
                htmlFor="message"
                id="messageTitle"
              />
              <div
                className="c-field__controls"
              >
                <div
                  className="u-visually-hidden off-screen"
                  id="textAreaMaxMsg"
                />
                <TextAreaComponent
                  accessID="messageTitle"
                  ariaId="textAreaMaxMsg"
                  id="message"
                  textData={[Function]}
                />
              </div>
            </div>,
            false,
            false,
            false,
            false,
            false,
            undefined,
            <div
              className="c-btn--group"
            >
              <Link
                className="c-btn c-btn--secondary"
                replace={false}
                to="undefined/securemessages"
              >
                Back
              </Link>
              <button
                className="c-btn c-btn--secondary"
                disabled={true}
                name="Save Draft"
                onClick={[Function]}
              />
              <button
                className="c-btn c-btn--default"
                disabled={true}
                name="Send"
                onClick={[Function]}
              />
            </div>,
          ],
          "className": "col-md1-24 col-sm1-24 col-lg1-24",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-md1-18"
              >
                <StepHeader
                  headerCrumbsMessage="Back"
                  headerCrumbsPath={
                    Object {
                      "pathname": "undefined/securemessages",
                    }
                  }
                  headerTitle={undefined}
                  onClick={[Function]}
                  showControl={false}
                  showheaderCrumbs={true}
                />
              </div>,
              "className": "row",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <StepHeader
                  headerCrumbsMessage="Back"
                  headerCrumbsPath={
                    Object {
                      "pathname": "undefined/securemessages",
                    }
                  }
                  headerTitle={undefined}
                  onClick={[Function]}
                  showControl={false}
                  showheaderCrumbs={true}
                />,
                "className": "col-md1-18",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "headerCrumbsMessage": "Back",
                  "headerCrumbsPath": Object {
                    "pathname": "undefined/securemessages",
                  },
                  "headerTitle": undefined,
                  "onClick": [Function],
                  "showControl": false,
                  "showheaderCrumbs": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  className="c-field__label c-field__label--block"
                  htmlFor="subjects"
                  id="subjectTitle"
                />,
                <div
                  className="c-field__controls u-position-relative"
                >
                  <Connect(DropDownComponent)
                    accessID="Subject"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    ddId="ddlSubject"
                    id="subjects"
                    isFromDraft={false}
                    selectSubject={[Function]}
                    selectedValue={undefined}
                    showSubjectError={false}
                    subjects={undefined}
                  />
                </div>,
              ],
              "className": "c-field",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-field__label c-field__label--block",
                  "htmlFor": "subjects",
                  "id": "subjectTitle",
                },
                "ref": null,
                "rendered": null,
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Connect(DropDownComponent)
                    accessID="Subject"
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    ddId="ddlSubject"
                    id="subjects"
                    isFromDraft={false}
                    selectSubject={[Function]}
                    selectedValue={undefined}
                    showSubjectError={false}
                    subjects={undefined}
                  />,
                  "className": "c-field__controls u-position-relative",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "accessID": "Subject",
                    "content": Object {
                      "back": "Back",
                    },
                    "ddId": "ddlSubject",
                    "id": "subjects",
                    "isFromDraft": false,
                    "selectSubject": [Function],
                    "selectedValue": undefined,
                    "showSubjectError": false,
                    "subjects": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  className="c-field__label c-field__label--block"
                  htmlFor="accounts"
                  id="relatesTitle"
                />,
                <div
                  className="c-field__controls u-position-relative"
                >
                  <Connect(DropDownComponent)
                    accessID="Message relates to"
                    accounts={undefined}
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    ddId="ddlAccount"
                    id="accounts"
                    isFromDraft={false}
                    selectSubject={[Function]}
                    selectedValue={undefined}
                    showAccountError={false}
                  />
                </div>,
              ],
              "className": "c-field",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-field__label c-field__label--block",
                  "htmlFor": "accounts",
                  "id": "relatesTitle",
                },
                "ref": null,
                "rendered": null,
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Connect(DropDownComponent)
                    accessID="Message relates to"
                    accounts={undefined}
                    content={
                      Object {
                        "back": "Back",
                      }
                    }
                    ddId="ddlAccount"
                    id="accounts"
                    isFromDraft={false}
                    selectSubject={[Function]}
                    selectedValue={undefined}
                    showAccountError={false}
                  />,
                  "className": "c-field__controls u-position-relative",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "accessID": "Message relates to",
                    "accounts": undefined,
                    "content": Object {
                      "back": "Back",
                    },
                    "ddId": "ddlAccount",
                    "id": "accounts",
                    "isFromDraft": false,
                    "selectSubject": [Function],
                    "selectedValue": undefined,
                    "showAccountError": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  className="c-field__label c-field__label--block"
                  htmlFor="message"
                  id="messageTitle"
                />,
                <div
                  className="c-field__controls"
                >
                  <div
                    className="u-visually-hidden off-screen"
                    id="textAreaMaxMsg"
                  />
                  <TextAreaComponent
                    accessID="messageTitle"
                    ariaId="textAreaMaxMsg"
                    id="message"
                    textData={[Function]}
                  />
                </div>,
                undefined,
              ],
              "className": "c-field",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-field__label c-field__label--block",
                  "htmlFor": "message",
                  "id": "messageTitle",
                },
                "ref": null,
                "rendered": null,
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="u-visually-hidden off-screen"
                      id="textAreaMaxMsg"
                    />,
                    <TextAreaComponent
                      accessID="messageTitle"
                      ariaId="textAreaMaxMsg"
                      id="message"
                      textData={[Function]}
                    />,
                  ],
                  "className": "c-field__controls",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": undefined,
                      "className": "u-visually-hidden off-screen",
                      "id": "textAreaMaxMsg",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "accessID": "messageTitle",
                      "ariaId": "textAreaMaxMsg",
                      "id": "message",
                      "textData": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              undefined,
            ],
            "type": "div",
          },
          false,
          false,
          false,
          false,
          false,
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Link
                  className="c-btn c-btn--secondary"
                  replace={false}
                  to="undefined/securemessages"
                >
                  Back
                </Link>,
                <button
                  className="c-btn c-btn--secondary"
                  disabled={true}
                  name="Save Draft"
                  onClick={[Function]}
                />,
                <button
                  className="c-btn c-btn--default"
                  disabled={true}
                  name="Send"
                  onClick={[Function]}
                />,
              ],
              "className": "c-btn--group",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Back",
                  "className": "c-btn c-btn--secondary",
                  "replace": false,
                  "to": "undefined/securemessages",
                },
                "ref": null,
                "rendered": "Back",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--secondary",
                  "disabled": true,
                  "name": "Save Draft",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "c-btn c-btn--default",
                  "disabled": true,
                  "name": "Send",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenFourAdapter {
      "options": Object {
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
